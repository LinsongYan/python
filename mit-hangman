import random
import string

WORDLIST_FILENAME = "D:\\Desktop\\words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    ele=''
    dec=True
    for i in secret_word:
        if not i in ele:
            ele+=str(i)
    for i in ele:
        if not i in letters_guessed:
            dec=False
    return dec
        



def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    result=' '
    for i in secret_word:
        if i in letters_guessed:
            result+=i+' '
        else:
            result+='_ '
    return result


def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    result='abcdefghijklmnopqrstuvwxyz'
    for i in letters_guessed:
        result=''.join(result.split(i))
    return result
    
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''

    def calscore(secret_word, letters_guessed):
        haveguess=0
        ele=''
        for i in secret_word:
            if not i in ele:
                ele+=str(i)
        for i in ele:
            if i in letters_guessed:
                haveguess+=1
        return haveguess
            
        

    guesses=8
    warning=0
    letters_guessed=[]


    while True:
        print('\n--------------------------------------------------------------------')
        print('You have '+str(guesses)+' left.')
        print('Available letters: '+get_available_letters(letters_guessed))
        print('This word is of', len(secret_word), 'length.\n')
        print('Type in * to get possible words.')
        thisguess=(input('Please guess a letter:')).lower()
        guesses-=1

        if thisguess=='':
            guesses+=1
        elif len(thisguess)>1 or not thisguess in 'abcdefghijklmnopqrstuvwxyz*':
            warning+=1
            guesses+=1
            print('\nYou receive a WARNING, please input a single letter.\nYou have', warning, 'warnings now.')
            print('\nIf you receve 3, you lose.\n ')
        elif thisguess=='*':
            guesses+=1
            print('Possible word matches are:')
            print(show_possible_matches(get_guessed_word(secret_word, letters_guessed),letters_guessed))
        elif thisguess in letters_guessed:
            print('You have guessed this letter:', get_guessed_word(secret_word, letters_guessed))
        else:
            letters_guessed.append(thisguess)
        
            if thisguess in secret_word:
                guesses+=1
                print('Good guess:', get_guessed_word(secret_word, letters_guessed))
            else:
                print('Oops! That,letter is not in my word:', get_guessed_word(secret_word, letters_guessed))

        if is_word_guessed(secret_word, letters_guessed):
            print('Congratulations, you win!')
            print('Your total score for this game is:', guesses*calscore(secret_word, letters_guessed))
            break
            
        elif guesses==0:
            print('You have no chance to guess.')
            print('Your total score for this game is:', guesses*calscore(secret_word, letters_guessed))
            print('\nThe word is:', secret_word)
            break
        elif warning==3:
            print('Please play it normally.')
            print('Your total score for this game is:', guesses*calscore(secret_word, letters_guessed))
            print('\nThe word is:', secret_word)
            break
        

    
   

    


# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
#(hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------



def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    word=''
    for i in my_word:
        if i in 'abcdefghijklmnopqrstuvwxyz_':
            word+=i
    if len(word)!=len(other_word):
        return False
    
    testlib={}
    num=0
    while num<len(word):
        testlib[num]=word[num]
        num+=1

    for i in range(0,len(other_word)):
        if testlib[i]!='_' and testlib[i]!=other_word[i]:
                return False
    return True
            


def show_possible_matches(my_word,letters_guessed):

    inFile = open(WORDLIST_FILENAME, 'r')
    line = inFile.readline()
    wordlist = line.split()

    searchlist=[]
    for i in wordlist:
        if match_with_gaps(my_word,i):
            searchlist.append(i)

    def get_rid(testword):
        word=''
        for i in my_word:
           if i in 'abcdefghijklmnopqrstuvwxyz_':
                word+=i
        mytest=[]
        for i in range(0,len(word)):
            if word[i]=='_':
                mytest.append(False)
            else:
                mytest.append(True)

        guesslist=[]
        notguesslist=[]
        for i in range(0,len(mytest)):
            if mytest[i]:
                guesslist.append(testword[i])
            else:
                notguesslist.append(testword[i])

        for i in guesslist:
            if i in notguesslist:
                return False
        return True

    copy=searchlist[:]
    for i in searchlist:
        if not get_rid(i):
            copy.remove(i)

    searchlist=copy[:]

    hnletters=''
    for i in my_word:
        if i in 'abcdefghijklmnopqrstuvwxyz':
            hnletters+=i
    
    dellist=[]
    for i in letters_guessed:
        if not i in hnletters:
            dellist.append(i)
    for i in searchlist:
        retest=False
        for j in i:
            if j in dellist:
                retest=True
        if retest:
            copy.remove(i)
            
    searchlist=copy[:]
    
    if searchlist==[]:
        print('No matches found')
    else:
        print(' '.join(searchlist))
        


def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass



# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.


if __name__ == "__main__":
    #pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
    secret_word = choose_word(wordlist)

    hangman(secret_word)

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
    #secret_word = choose_word(wordlist)
    #hangman_with_hints(secret_word)
